{"version":3,"sources":["firebase.js","StateProvider.js","shared/toastInfo.js","actions/userAction.js","App.js","serviceWorkerRegistration.js","reducer.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","storage","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","toastInfo","toastTitle","toastId","position","toast","info","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setUser","authUser","type","user","Login","React","lazy","Sidebar","Chat","App","dispatch","useState","rooms","setRooms","isRoomExist","setIsRoomExist","loading","setLoading","useEffect","unsubscribe","onAuthStateChanged","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","isAnonymous","displayName","anonymousName","Math","floor","random","currentUser","updateProfile","photoURL","uid","set","name","about","role","email","dateJoined","FieldValue","serverTimestamp","then","console","log","catch","error","get","exists","Suspense","fallback","className","newestOnTop","rtl","pauseOnFocusLoss","exact","path","Hidden","only","to","CircularProgress","LinearProgress","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","actionTypes","action","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1a1e7a7e.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCF7lHw_Z7DmZgpoZuYIGveD0eZ8ha7Qyg\",\r\n  authDomain: \"tattle-9359.firebaseapp.com\",\r\n  databaseURL: \"https://tattle-9359-default-rtdb.firebaseio.com/\",\r\n  projectId: \"tattle-9359\",\r\n  storageBucket: \"tattle-9359.appspot.com\",\r\n  messagingSenderId: \"849640668400\",\r\n  appId: \"1:849640668400:web:91c77b3a931a325ef4d635\",\r\n  measurementId: \"G-17X1MHRTRX\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nconst storage = firebase.storage();\r\n\r\nexport { auth, provider, storage, firebase };\r\nexport default db;\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue =  () => useContext(StateContext);","import { toast } from 'react-toastify';\r\n\r\nexport const toastInfo = ( toastTitle, toastId, position ) => {\r\n    toast.info(toastTitle, {\r\n        toastId: toastId,\r\n        position: position,\r\n        autoClose: 5000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        }\r\n    );\r\n}","export function setUser(authUser){\r\n    return {\r\n        type: 'SET_USER',\r\n        user: authUser,\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n//importing firebase\r\nimport db from \"./firebase\";\r\nimport { auth, firebase } from \"./firebase\";\r\n//importing actions\r\nimport { setUser } from \"./actions/userAction\";\r\n//importing components\r\n// import Login from \"./Login\";\r\n// import Sidebar from \"../src/Sidebar/Sidebar\";\r\n// import Chat from \"../src/Chat/Chat\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { toastInfo } from \"./shared/toastInfo\";\r\n//importing material-ui\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n//importing styles\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.css\";\r\n\r\nconst Login = React.lazy(() => import(\"./Login\"));\r\nconst Sidebar = React.lazy(() => import(\"../src/Sidebar/Sidebar\"));\r\nconst Chat = React.lazy(() => import(\"../src/Chat/Chat\"));\r\nfunction App() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const [rooms, setRooms] = useState([]);\r\n  const [isRoomExist, setIsRoomExist] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(setUser(authUser));\r\n        setLoading(true);\r\n\r\n        db.collection(\"rooms\")\r\n          .orderBy(\"timestamp\", \"desc\")\r\n          .onSnapshot((snapshot) =>\r\n            setRooms(\r\n              snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                data: doc.data(),\r\n              }))\r\n            )\r\n          );\r\n\r\n        if (authUser.isAnonymous === true && authUser.displayName === null) {\r\n          var anonymousName =\r\n            // eslint-disable-next-line no-useless-concat\r\n            \"anonymous\" + Math.floor(Math.random() * 1000000);\r\n\r\n          auth.currentUser.updateProfile({\r\n            displayName: anonymousName,\r\n            photoURL: \"\",\r\n          });\r\n\r\n          db.collection(\"users\")\r\n            .doc(authUser.uid)\r\n            .set({\r\n              name: anonymousName,\r\n              about: \"Hey there! I am using Tattle.\",\r\n              photoURL: \"https://avatars.dicebear.com/api/human/ugtjh.svg\",\r\n              role: \"anonymous\",\r\n              email: anonymousName + \"@anonymous.com\",\r\n              dateJoined: firebase.firestore.FieldValue.serverTimestamp(),\r\n            })\r\n            .then(function () {\r\n              console.log(\"Document successfully updated!\");\r\n            })\r\n            .catch(function (error) {\r\n              // The document probably doesn't exist.\r\n              console.error(\"Error updating document: \", error);\r\n            });\r\n        }\r\n\r\n        if (\r\n          authUser.uid &&\r\n          authUser.isAnonymous === false &&\r\n          authUser.photoURL !== null\r\n        ) {\r\n          const errorAbout = \"errorAbout\";\r\n          db.collection(\"users\")\r\n            .doc(authUser.uid)\r\n            .get()\r\n            .then(function (doc) {\r\n              if (doc.exists) {\r\n                // console.log(\"USER EXIST\");\r\n              } else {\r\n                db.collection(\"users\").doc(authUser.uid).set({\r\n                  name: authUser.displayName,\r\n                  about: \"Hey there! I am using Tattle.\",\r\n                  photoURL: user.photoURL,\r\n                  role: \"regular\",\r\n                  email: authUser.email,\r\n                  dateJoined: firebase.firestore.FieldValue.serverTimestamp(),\r\n                });\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              toastInfo(`${error}`, errorAbout, \"top-center\");\r\n            });\r\n        } else if (\r\n          authUser.uid &&\r\n          authUser.isAnonymous === false &&\r\n          authUser.photoURL === null\r\n        ) {\r\n          const errorAbout = \"errorAbout\";\r\n          db.collection(\"users\")\r\n            .doc(authUser.uid)\r\n            .get()\r\n            .then(function (doc) {\r\n              if (doc.exists) {\r\n                console.log(\"USER EXIST\");\r\n              } else {\r\n                db.collection(\"users\").doc(authUser.uid).set({\r\n                  name: authUser.displayName,\r\n                  about: \"Hey there! I am using Tattle.\",\r\n                  photoURL: \"\",\r\n                  role: \"regular\",\r\n                  email: authUser.email,\r\n                  dateJoined: firebase.firestore.FieldValue.serverTimestamp(),\r\n                });\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              toastInfo(`${error}`, errorAbout, \"top-center\");\r\n            });\r\n        }\r\n      } else {\r\n        dispatch(setUser(null));\r\n        setLoading(true);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [dispatch, user]);\r\n\r\n  return (\r\n    <React.Suspense fallback={<p>Loading</p>}>\r\n      <div className={`app ${loading === false && \"app-no-bg\"}`}>\r\n        {loading ? (\r\n          <>\r\n            <ToastContainer\r\n              position=\"top-center\"\r\n              autoClose={5000}\r\n              newestOnTop={false}\r\n              closeOnClick\r\n              rtl={false}\r\n              pauseOnFocusLoss\r\n              draggable\r\n            />\r\n            {!user ? (\r\n              <Login />\r\n            ) : (\r\n              <div className=\"app__body\">\r\n                <Router>\r\n                  <Switch>\r\n                    <Route exact path=\"/\">\r\n                      <Sidebar\r\n                        rooms={rooms}\r\n                        setIsRoomExist={setIsRoomExist}\r\n                        isRoomExist={isRoomExist}\r\n                      />\r\n                      <Hidden only={[\"xs\"]}>\r\n                        {\" \"}\r\n                        {/* Chat component will be hidden in mobile view */}\r\n                        <Chat isRoomExist={isRoomExist} />\r\n                      </Hidden>\r\n                    </Route>\r\n\r\n                    <Route exact path=\"/rooms/:roomId\">\r\n                      <Hidden only={[\"xs\"]}>\r\n                        {\" \"}\r\n                        {/* Sidebar component will be hidden in mobile view */}\r\n                        <Sidebar\r\n                          rooms={rooms}\r\n                          setIsRoomExist={setIsRoomExist}\r\n                          isRoomExist={isRoomExist}\r\n                        />\r\n                      </Hidden>\r\n                      <Chat isRoomExist={isRoomExist} />\r\n                    </Route>\r\n\r\n                    <Route path=\"*\">\r\n                      <Redirect to=\"/\" />\r\n                    </Route>\r\n                  </Switch>\r\n                </Router>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"app__loading\">\r\n            <div>\r\n              <div className=\"app__loading_circular\">\r\n                <CircularProgress />\r\n              </div>\r\n              <div className=\"app__loading_linear\">\r\n                <LinearProgress />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </React.Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const initialState = {\r\n    user: null,\r\n}\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { StateProvider } from './StateProvider';\r\nimport reducer, { initialState } from './reducer';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer} >\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}